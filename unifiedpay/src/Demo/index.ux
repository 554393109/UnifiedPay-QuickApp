<template>
  <!-- template里只能有一个根节点 -->
  <div class="demo-page">
    <text class="title">欢迎打开{{title}}</text>
    <!-- 点击跳转详情页 -->
    <input class="btn" type="button" value="跳转到详情页" onclick="routeDetail" />
    <!-- 点击扫描付款码 -->
    <input class="btn" type="button" value="扫描付款码" onclick="scanAuthCode" />
  </div>
</template>

<script>
import router from '@system.router'
import notification from '@system.notification'
import prompt from '@system.prompt'
import barcode from '@system.barcode'
import vibrator from '@system.vibrator'
import fetch from '@system.fetch'

export default {
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
  private: {
    title: '超赢码上付'
  },
  routeDetail() {
    // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
    router.push({
      uri: '/DemoDetail'
    })
  },
  scanAuthCode() {
    vibrator.vibrate({
      mode: 'short'
    })

    barcode.scan({
      success: function (data) {
        // console.log(`handling success: ${data.result}`)
        var auto_code = data.result
        vibrator.vibrate({
          mode: 'short'
        })

        notification.show({
          contentTitle: '扫码成功',
          contentText: auto_code
        })

        prompt.showDialog({
          title: '扫码成功',
          message: auto_code,
          buttons: [
            {
              text: 'POST到Server',
              color: '#33dd44'
            }
          ],
          success: function (data) {

            fetch.fetch({
              url: 'http://yin554393109.gicp.net/Test/Report',
              header: {
                'Token': 'ABCDEFG',
                'Content-Type': 'application/x-www-form-urlencoded'
              },
              responseType: 'json',
              method: 'POST',
              data: { auto_code: auto_code }
              // data: `auto_code=${auto_code}`
            })
              .then(res => {                
                vibrator.vibrate({
                  mode: 'long'
                })

                const result = res.data

                prompt.showDialog({
                  title: '扫码成功',
                  message: `【响应报文】${JSON.stringify(result.data)}`,
                  buttons: [
                    {
                      text: '返回',
                      color: '#33dd44'
                    }
                  ],
                  success: function (data) {
                    console.log('handling callback')
                  }
                })
              })
              .catch(error => {
                console.log(`handling fail, errMsg = ${error.data}`)
                console.log(`handling fail, errCode = ${error.code}`)
                notification.show({
                  contentTitle: '请求失败',
                  contentText: JSON.stringify(error)
                })
              })
          },
          cancel: function () {
            console.log('handling cancel')
          },
          fail: function (data, code) {
            console.log(`handling fail, code = ${code}`)
          }
        })
      },
      fail: function (data, code) {
        // console.log(`handling fail, code = ${code}`)
        notification.show({
          contentTitle: '扫码失败',
          contentText: data.result
        })
      }
    })
  }
}
</script>

<style>
.demo-page {
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.title {
  font-size: 40px;
  text-align: center;
}

.btn {
  width: 550px;
  height: 86px;
  margin-top: 75px;
  border-radius: 43px;
  background-color: #09ba07;
  font-size: 30px;
  color: #ffffff;
}
</style>
